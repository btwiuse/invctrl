"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:defs.bzl",
    "rust_binary",
    "rust_library",
    "rust_proc_macro",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated Targets
# buildifier: disable=out-of-order-load
# buildifier: disable=load-on-top
load(
    "@rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

cargo_build_script(
    name = "native_tls_build_script",
    srcs = glob(["**/*.rs"]),
    build_script_env = {
    },
    crate_features = [
    ],
    crate_root = "build.rs",
    data = glob(["**"]),
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.2.8",
    visibility = ["//visibility:private"],
    deps = [
    ] + selects.with_or({
        # cfg(any(target_os = "macos", target_os = "ios"))
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
        ): [
            "//cargo/vendor/security-framework-sys-2.4.1:security_framework_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(not(any(target_os = "windows", target_os = "macos", target_os = "ios")))
        (
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            "//cargo/vendor/openssl-sys-0.9.66:openssl_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "windows")
        (
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "google-connect" with type "example" omitted

# Unsupported target "simple-server" with type "example" omitted

rust_library(
    name = "native_tls",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
    ],
    crate_root = "src/lib.rs",
    data = [],
    edition = "2015",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "crate-name=native-tls",
        "manual",
    ],
    version = "0.2.8",
    # buildifier: leave-alone
    deps = [
        ":native_tls_build_script",
    ] + selects.with_or({
        # cfg(any(target_os = "macos", target_os = "ios"))
        (
            "@rules_rust//rust/platform:x86_64-apple-darwin",
        ): [
            "//cargo/vendor/lazy_static-1.4.0:lazy_static",
            "//cargo/vendor/libc-0.2.121:libc",
            "//cargo/vendor/security-framework-2.4.1:security_framework",
            "//cargo/vendor/security-framework-sys-2.4.1:security_framework_sys",
            "//cargo/vendor/tempfile-3.2.0:tempfile",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(not(any(target_os = "windows", target_os = "macos", target_os = "ios")))
        (
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            "//cargo/vendor/log-0.4.14:log",
            "//cargo/vendor/openssl-0.10.36:openssl",
            "//cargo/vendor/openssl-probe-0.1.4:openssl_probe",
            "//cargo/vendor/openssl-sys-0.9.66:openssl_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(target_os = "windows")
        (
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            "//cargo/vendor/schannel-0.1.19:schannel",
        ],
        "//conditions:default": [],
    }),
)
